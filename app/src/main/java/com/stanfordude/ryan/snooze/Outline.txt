        Trying to "copy" apple's timer apps

The main activity UI will have a button bar at the bottom to switch between fragments
The action bar or a button will be used to create new values
  The alarm fragment, will have a scrollable list of alarm times, which will show the time property,
  and if the alarm is set.

    The alarm times are displayed using a ListView

Will contain a fragment for personal alarms, and a fragment for wakeup notifications to others.
       This fragment will be able to text a group of people a custom message at the scheduled time,
       and will be able to call them at the scheduled time with a custom recording.



TODO:In the alarm fragment, must schedule Alarms using alarmManager when saving and creating AlarmSettings,
also, the previous alarms must be cancelled when editing a setting, and alarms must be deleted
when AlarmSettings are deleted.


Problems: Get the alarms to cancel and be set with the toggleButton checked state:
Using the array Adapter to provide this functionality



  Questions:

How to do the background process of getting alarms to beat



Plan for Notification Paradigm for user alarms:

    I want it to be something simple on the lock screen that will happen when the RTC_WAKEUP call is triggered.
    Courtesy to @awendland I will be using a notification based model that includes buttons for stop
    and snooze on it.

    AlarmManager will trigger the BeepReceiver, the BeepReceiver will create a notification with the actions directed towards the intent service
     and then will feed the intent service with an intent that states that it should start ringing. Intents received from the notification
     actions will be dealt with accordingly (messy put extras stuff) . If it is to snooze, then the intent service will create a
      new Alarmsetting and set its alarm minutes+snoozeLength minutes later. This will retrigger the notification to fire (recursive) , but
      will keep the same snoozelength present. If the stop button is pressed, then the intent service will be notified and will concurrently
      stop ringing.

     Note: with the Notification manager it is important to save the id for the notification in the intent extras, so that once the intent
     service receives it, it can cancel the notification.
     Note: for each action in the notification I will need a separate PendingIntent to make it unique
    TODO figure out how snoozing will work, maybe an intent extra value?


     So far, the above seems to have been implemented roughly. I need to write in the code for the ringtones still. After that, I need to
     implement a system for the alarms to be reestablished after a reboot. Ideas include calling setAlarm() on the AlarmSettings after
     creating them from the Shared Preference Values. I will need to do some testing to make sure that this side of the project is working
     on the backend at least. I will work on making the ui better towards the end, maybe with my associate @ngildenhuys.




******************************************************************************************************************************************
                        This is the plan for the 2nd half of this app, and the more interesting part.

       2nd half will consist of a simillar ui to the 1st half, but instead of being wakeup alarms, they will be used to schedule
       text messaging in an sms form. Basically, I plan on keeping the code of these two halves very similar except that in their
       separate intent services, where it will text a contact/group of contacts instead of playing the ringtone. Use another class to keep
       the info needed, similar to AlarmSetting, but will contain a message, and a listview of contacts to send it to.


       Possible Problems: how will alarms that are set at the same time work????????????? Likely chance that that may happen
       since two different messages may have to be sent at the same time.




